// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Monitoring.Data;

namespace Monitoring.Data.Migrations
{
    [DbContext(typeof(MonitoringDbContext))]
    [Migration("20210105194022_Default date time")]
    partial class Defaultdatetime
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Monitoring.Data.Entities.MonitoringClient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MonitoringClient");
                });

            modelBuilder.Entity("Monitoring.Data.Entities.MonitoringConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Configuration")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MonitoringConfiguration");
                });

            modelBuilder.Entity("Monitoring.Data.Entities.MonitoringLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Exception")
                        .HasColumnType("TEXT");

                    b.Property<string>("Level")
                        .HasColumnType("TEXT");

                    b.Property<string>("Logger")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<string>("Stacktrace")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MonitoringLog");
                });

            modelBuilder.Entity("Monitoring.Data.Entities.MonitoringReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ConfigId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("MonitoringClientId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MonitoringConfigurationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Result")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskType")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MonitoringClientId");

                    b.HasIndex("MonitoringConfigurationId");

                    b.ToTable("MonitoringReport");
                });

            modelBuilder.Entity("Monitoring.Data.Entities.MonitoringReport", b =>
                {
                    b.HasOne("Monitoring.Data.Entities.MonitoringClient", "MonitoringClient")
                        .WithMany()
                        .HasForeignKey("MonitoringClientId");

                    b.HasOne("Monitoring.Data.Entities.MonitoringConfiguration", "MonitoringConfiguration")
                        .WithMany()
                        .HasForeignKey("MonitoringConfigurationId");

                    b.Navigation("MonitoringClient");

                    b.Navigation("MonitoringConfiguration");
                });
#pragma warning restore 612, 618
        }
    }
}
